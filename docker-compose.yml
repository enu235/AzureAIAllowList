services:
  azure-ai-allowlist-tool:
    build: .
    platform: linux/amd64  # Force x86_64 architecture
    container_name: azure-ai-allowlist-tool
    volumes:
      # Mount current directory for input files
      - ./input:/workspace/input
      # Mount output directory for both package allowlist and connectivity reports
      - ./output:/workspace/output
      - ./connectivity-reports:/workspace/connectivity-reports
      # Mount Azure CLI credentials (if running authenticated)
      - ~/.azure:/home/azureml-user/.azure:ro
    environment:
      - AZURE_CLI_DISABLE_CONNECTION_VERIFICATION=1
    working_dir: /workspace
    stdin_open: true
    tty: true
    
    # Default command shows help - override as needed
    command: python main.py --help

# Create directories for input/output if they don't exist
# Run: mkdir -p input output connectivity-reports before running docker-compose

# Usage Examples:
# 
# 1. Show help:
#   docker-compose up azure-ai-allowlist-tool
#
# 2. Package allowlist generation:
#   docker-compose run --rm azure-ai-allowlist-tool python main.py \
#     --hub-type ai-foundry \
#     --workspace-name "your-workspace" \
#     --resource-group "your-rg" \
#     --requirements-file "/workspace/input/requirements.txt" \
#     --output-file "/workspace/output/azure-cli-commands.sh"
#
# 3. Connectivity analysis:
#   docker-compose run --rm azure-ai-allowlist-tool python main.py \
#     --hub-type ai-foundry \
#     --workspace-name "your-workspace" \
#     --resource-group "your-rg" \
#     --action analyze-connectivity
#
# 4. Interactive shell:
#   docker-compose run --rm azure-ai-allowlist-tool /bin/bash
#
# 5. Azure ML workspace example:
#   docker-compose run --rm azure-ai-allowlist-tool python main.py \
#     --hub-type azure-ml \
#     --workspace-name "your-ml-workspace" \
#     --resource-group "your-rg" \
#     --requirements-file "/workspace/input/requirements.txt" 